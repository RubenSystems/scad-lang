//===- scad.pst - SCaD Grammar Specification -*- PEST -*-=====================//
//
// This file defines the grammar rules for a custom language using PEST.
// Part of the SCaD Compiler
//
//===----------------------------------------------------------------------===//
///
/// \file
/// Defines the grammar using the PEST library for parsing SCaD.
/// This grammar defines the syntax and rules for various constructs in the
/// language.
///
//===----------------------------------------------------------------------===//


// MISC
WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "\r\n"  }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

// Terminals
integer = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
char_array = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
identifier = { (ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*) }
boolean_t = { "true" | "false" }

// type
type = _{ array_type | simple_type }
array_type = { "[" ~ type ~ ";" ~ integer ~ "]" }
simple_type = { identifier }

// Variable declerations
const_decl = { "let" ~ identifier ~ ":" ~ type ~ "=" ~ expression }
var_decl = { "let mut" ~ identifier ~ ":" ~ type ~ "=" ~ expression }

// variable reassignement 
var_reassignment = {identifier ~ "=" ~ expression}

// block
block = _{ 
	expression_block 
	| statement_block
} 

statement_block = { "{" ~ statements ~ "}" } 
expression_block = { "{" ~ statements ~ expression ~ "}" } 


// if statement
if_statement_control_flow = {
	if_statement_block ~ else_if_statement_block* ~ else_statement_block?
}

if_statement_block = {
	"if" ~ expression ~ block
}

else_if_statement_block = {
	"else if" ~ expression ~ block
}

else_statement_block = {
	"else" ~ block
}

// if exp
if_expression_control_flow = {
	if_expression_block ~ else_if_expression_block* ~ else_expression_block
}

if_expression_block = {
	"if" ~ expression ~ expression_block
}

else_if_expression_block = {
	"else if" ~ expression ~ expression_block
}

else_expression_block = {
	"else" ~ expression_block
}

// loopz
loop = _{ nonconditional_loop | conditional_loop }

nonconditional_loop = {
	"loop" ~ block
}

conditional_loop = {
	"loop" ~ expression ~ block
}

// Functios

comptime_generic_list = {
	"<" ~ type+ ~ ">"
}

forward_function_decleration = {
	"fn" ~ function_name ~ comptime_generic_list? ~ "(" ~ function_def_params? ~ ")" ~ type
}

function_definition = {
	"fn" ~ function_name ~ comptime_generic_list? ~ "(" ~ function_def_params? ~ ")" ~ type ~ expression_block 
}

forward_procedure_decleration = {
	"fn" ~ function_name ~ "(" ~ function_def_params? ~ ")"
}

procedure_definition = {
	"fn" ~ function_name ~ "(" ~ function_def_params? ~ ")" ~ statement_block 
}



function_call = {
	function_name ~ "(" ~ function_call_params? ~ ")"
}

function_name = {identifier}

// param: name: type
function_def_params = {
	function_def_param ~ ("," ~ function_def_param)*
}

function_call_params = {
	function_call_param ~ ("," ~ function_call_param)*
}

function_def_param = { 
	identifier ~ ":" ~ type
}

function_call_param = { 
	identifier ~ ":" ~ expression
}


infix_operator = _{ 
	add 
	| subtract 
	| multiply 
	| divide 
	| and 
	| or 
	| greater_equal 
	| greater 
	| greater 
	| less  
	| equal 
}
infix_operation = { 
	(non_infix_expressions ~ infix_operator ~ non_infix_expressions ) ~ (infix_operator ~ non_infix_expressions)* 
}
add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }
and = { "&&" }
or = { "||" }

binary_infix_operator = _{  
	greater_equal 
	| greater 
	| greater 
	| less  
	| equal 
}

binary_infix_operation = { 
	non_infix_expressions ~ binary_infix_operator ~ non_infix_expressions 
}
greater = { ">" }
greater_equal = { ">=" }
less = { "<" }
less_equal = { "<=" }
equal = { "==" }


// Major building blocks

non_infix_expressions = _{ 
	function_call 
	| if_expression_control_flow 
	| "(" ~ expression ~ ")" 
	| expression_block 
	| float 
	| integer
	| boolean_t 
	| char_array
	| identifier 
}

expression = { 
	binary_infix_operation 
	| infix_operation 
	| non_infix_expressions  
}



statement = { 
	var_decl 
	| const_decl 
	| loop 
	| if_statement_control_flow 
	| var_reassignment
	| expression 
}

statements = _{ (statement ~ (WHITESPACE? ~ ";" ~ WHITESPACE?))* }

top_level_statement = { 
	function_definition 
	| procedure_definition
	| forward_function_decleration 
	| forward_procedure_decleration 
}


top_level_statements = _{ (top_level_statement ~ (WHITESPACE? ~ ";" ~ WHITESPACE?))* }
program = _{ SOI ~ top_level_statements ~ EOI }